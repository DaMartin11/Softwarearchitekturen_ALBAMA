version: '3.8'

services:
  user_service:
    container_name: user_service
    build:
      context: .
      dockerfile: src/main/resources/Dockerfile
    depends_on:
      - postgres
      - rabbitmq_user
    environment:
      - SPRING_DATASOURCE_URL=jdbc:postgresql://postgres:5432/postgres
      - SPRING_DATASOURCE_USERNAME=postgres
      - SPRING_DATASOURCE_PASSWORD=0993412740ali?
      - jwt.secret=eyJhbGciOiJIUzI1NiJ9.eyJSb2xlIjoiQWRtaW4iLCJJc3N1ZXIiOiJJc3N1ZXIiLCJVc2VybmFtZSI6IkphdmFJblVzZSIsImV4cCI6MTcyMTMwNTAwOCwiaWF0IjoxNzIxMzA1MDA4fQ.hj4TxErUeQRmxJYJO9yd0jYm2N4djtopzmWJWsI3yJM

      - SERVER_PORT=8081
      - SPRING_RABBITMQ_PORT=5672
      - SPRING_RABBITMQ_HOST=rabbitmq_user
    ports:
      - "8084:8081"  # Changed host port to 8084 to avoid conflict
    networks:
      - mynetwork

  postgres:
    image: postgres:12
    container_name: postgres_db
    environment:
      POSTGRES_PASSWORD: 0993412740ali?
      POSTGRES_DB: postgres
    ports:
      - "5432:5432"
    volumes:
      - ./postgres-data:/var/lib/postgresql/data
    networks:
      - mynetwork

  rabbitmq_user:
    image: 'rabbitmq:management'
    container_name: rabbitmq_user
    environment:
      - RABBITMQ_DEFAULT_USER=username
      - RABBITMQ_DEFAULT_PASS=password
    ports:
      - "5676:5672"  # Changed host port to 5676
      - "15675:15672"  # Changed management port to 15675
    restart: always
    healthcheck:
      test: ["CMD-SHELL", "rabbitmq-diagnostics ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - mynetwork

networks:
  mynetwork:
    driver: bridge